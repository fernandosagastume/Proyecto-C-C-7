Cambios PJ2 - CC7:

**IMPORTANTE: Se modificó el lock arquire y release a su estado incial con fines de que no interfiera con el proyecto 2**

//------------------------------------- Argument Passing----------------------------------------------------//

* Se realizó cambio en la función process_execute() en el archivo process.c, solamente se sustituyo el *filename* que se manda de argumento en thread_create() por *exec_name* variable que extrae el nombre del proceso del raw filename. Leer la pintos guide para información de esto. 

*Se cambió la función setup_stack() ubicada en userprog/process.c, se le agrego un nuevo argumento a la función "char *filename". Se modificó tambien la función load() ubicada tambien en userprog/process.c, donde por medio de un tokenizer se hace split del file_name, con el fin de sacar el nombre del file ya que file_name viene en formato file_name = "argname arg1 arg2 ...". Luego se pasa ese argname como argumento al file system.

* En setup_stack(), se hizo lo mismo de tokenizar el char *filename para sacar los args y guardarlos en un array. Luego se sacan en reversa los argumentos del filename, y se meten en el stack, en este proceso también se abre espacio en el stack para que quepa el \0 al final de cada arg. Luego se hace un word align de 0, seguido de eso, se mete un char * 0. Luego se meten las referencias de cada arg igualmenten en reversa, luego se coloca la referencia del ulitmo argv (argv[0]), luego se mete la cantidad de argumentos argc y por ultimo un return default que es 0. 

//------------------------------------- Argument Passing ----------------------------------------------------//

//------------------------------------- System Calls --------------------------------------------------------//

* Se agrega las siguientes funciones en userprog/syscall.h y userprog/syscall.c:
	- void syscall_halt (void); 
	- void syscall_exit (int exit_status);
	- bool syscall_create(const char* file, unsigned initial_size);
	- bool syscall_remove(const char* file);
* Para referencia de estas funciones ver la guia de pintos.
* Se agrega la funcion sycall_create, que basicamente crea un nuevo archivo con un tamaño inicial de bytes y devuelve verdadero o falso en función de si se pudo crear de manera exitosa. La creación del archivo se lleva a cabo por medio de filesys_create(). Se utiliza un lock para prevenir lecturas o escrituras antes de que el archivo sea creado.
* Para la función syscall_remove se lleva a cabo la misma metodología que en syscall_create. 
//------------------------------------- System Calls --------------------------------------------------------//
